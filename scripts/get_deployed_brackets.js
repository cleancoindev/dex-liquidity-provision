const createCsvWriter = require("csv-writer").createObjectCsvWriter
const { decodeOrders } = require("@gnosis.pm/dex-contracts")
const { fetchTokenInfoFromExchange, getExchange, getDeployedBrackets } = require("./utils/trading_strategy_helpers")(
  web3,
  artifacts
)
const { default_yargs } = require("./utils/default_yargs")
const argv = default_yargs
  .option("masterSafe", {
    type: "string",
    describe: "Address of Gnosis Safe owning every bracket",
    demandOption: true,
  })
  .option("outputFile", {
    type: "string",
    describe: "Path and file name for the output of the script",
    demandOption: false,
  }).argv

module.exports = async (callback) => {
  try {
    const bracketAddresses = "0x9DBFfA92Bb44F1d3b41Fa7761056FcD633d51459,0x7a48Dac683DA91e4faa5aB13D91AB5fd170875bd,0x75287A9D114CeFE339Ec339E44d706E847651b93,0x01ef26514b9275CFe4EC4cb9552611F29C845963,0xDEA8D87eC7b6d6C17F5C70ec82103F6330095Dca,0xF8e8C46028e238EcF9973c9b74c103B1756823da,0xcE2B2Dd016d13Fb2D202405827f134dC85eFb5cA,0xaF12196cBA071208eb76b04997875A5995361EFd,0x4D9AFb62d2c711fFC25727B84819eE17aDbdF34d,0xca7b512316340b8d052c6b5aecf84338f3abbfb0,0x1039EDd1d100185Eaf45141C99227D1B994CE11F,0x00F0FBDEEa1cDEc029Ba6025ca726Fdcf43E9025,0xd2CF6bc70C93058F6545dF809df79f76f798aac0,0x3a58a6E39B62Fe2FF81e06B0777BB3a476e90f44,0x906B5c2877dEad3c5565b042094d182b7575ADdE,0x4A77F409187E0f5084A391faC25c3F3497db73FB,0x7bCe8f1485C74B5eA536C12eA5713E38fF353d2e,0x36731EC6C6c10d99f09580820b8D30607A383288,0x19601E6825D2715CBD22B6AEC9B2528eDEe974A6,0x3e6C2b2c3a842b6492F9F43349D77A40568e3d7E,0x519C66D04878C0BA193B2e696173A0c0e17c527e,0x95D806485731E2033A0FDb3DcFfc0E6bF9FA3b37,0x88c470b7A4Db417Ad3578B485302D0C260668393,0x7127Bf85fFF72cDDf72a28a1569fc6Ce5810bB4D,0x0F27680805e50Fa0ab0dDAEa026ec3Da292a24DF,0xD17e111CB0c2209Be83E6e37Ee8D8CFDD42B7571,0xDcBB69104d58d4393B19f990FD4c1971D6F4B1E2,0xFAf106837b17F8c103dd10da56935Ef0ad302dc6,0x5F7DdAFa0D926bFBC78A20474A8f86044D5a4c43,0xf9F8866E8cEF0019E3CAB2d9A61e8d5F6035D63a,0xEC017db25fe89b55e32228240f04B26a332bF315,0xD816073771BEb353C527A980a0FF2d768DC4491C,0xc2c602626f72956aE56eE4D90E180a2D8480DdeC,0x31b27091913b24ba8420Fcf7c137240435332A16,0x1b9A0da77a5cACe4E7035993cBB2e4b1b3b164CF,0x4dAb56fc532A04e73087c18d3d377210a1233685,0x5A317285cD83092fD40153C4B7c3Df64d8482Da8,0xeC00523d1FB47a9c9F70ADdaE34517421bB7b7e5,0x9e6CCA0E2eb59Bcaf4649A918F091eF2d234c740,0x06e230d45235b071CfDC55e05D78E5E79dc7F1a1,0x649E70229B30E5Bc0CEF679F9f09Cd64fDaBB0d9,0x7E86F9523aAC25b0Da7D158891D2F2e07FD710e7,0xa67A1a69D198619411aF2dfF30593318Acf9D858,0x7945cdCA29ae9a7791998aff23c5DDC5cD257175,0x7dCE6B3E6cCD3020f4121dA76a8857bdB878ace6,0xF7E0e9c5934DB9ec9999c9DC8a8ca38e81e48Ac0,0xBF8C3FA1c408e45E684dE718002840454bDEC3D2,0x31fc45a95F2a357b53121e761B91484298570CD7,0x9bB418abb99402697B38562B7b483eBcf46e9b41,0x222553e6215115ECfa5392AA915991296B21a8CE,0xFB62b4F54C282A81356663Fff3961495786A7059,0x65AAEc82f8558667Cedb2862232A6772d3E93759,0x6015112DdD3f2EaCac088a9393C2CD85D6BCa8a9,0x44F5ee112730Ce2Fffc12d3116eB6C8a1dC1280D,0x96aC86684b0657DA25EbC55Bdb075A0Acee1Ce94,0xD785d0e45fF76BB12400AbfC6D9c84500F2ac02D,0x1c60B58C72933A9263c928b1D2Cd6D2a0188364b,0xc7d44814ce209c08ACC59BC4cC597CB164062226,0x6c0C324354f26f43eC15c5d2c91F207A18524C1D,0xa8c03018c35383D9a8DBE21F08a617cE67B19341,0x370a076b5b6A10A8355127db728911ED1D99E531,0xE73604fC1724a50CEcBC1096d4229b81aF117c94,0x8d8d0d74136AE888aA23eB81f9f0d95Cf9D6b8dD,0x1634CB63743C7E360ef6Ef367c5B0C3735F564b6,0x3eB57eE5885eC7Af5677012864F9c8dD1A0972c3,0xDD77394eCD4349c25eF3931D5f28e17dadf53d4c,0x74c61eC16D980Ac775D306444ceDB4414a170370,0xf4517a782b77Dfd62fB5ed7b31cbd78E34523B9b,0xDD9626CF3C52FA817816940B937A49b44b3DD674,0x9bD926383A3514A1A5B379fC3fa8212FB39Ad6ED,0x9669dE5Aa6F9A0Ed5A757896Fe8840FD7e85c8B5,0xAB795A52D809e4Aa56da23b215Db7663d57CDE3A,0x45d8a3d10cd7Da86Dac21a51B305312Ebf80072d,0x2952bC69739c9534d09525ccCa33950F311CbE88,0x052253771E92a5Ff3c31163492b7e9101e0FC62f,0x90cBbcA16a0d1B802F575c179288B739d545b791,0xFcb1954Aff83F07dB5F3665349797BaD77A75c81,0xfAE2748F91525B7Dd7E9868c16f9Ad5a6EA5DE68,0x410f792da8a0a2e2f43f7b9317dA04E00F05D1AD,0xB498dB083e1E2c25A0d384f87a4D05eB7c05effC,0xB30D7400ab53cB81512629e26080127eFfb32c00,0xC5B24B4Dab763a44AFe57f66eE0074C2598E84ab,0x2cef9A8596aa983aD973bd5B8b5278F3AC83b789,0x1E800A7E4b103cA2C270e162E66d1B099eC8C1A7,0x65539d12c28946831D65Bb32eEc3A33CaBFB9249,0xD34AD431994192618E2E73867FA2B91eC2fAadf8,0x6bA77Ae3defE9101eE99a94aaCeacaDfE0B972E8,0xC77466A2449E519B5bffC3DFAcAAf1Fe1D765667,0x00Adb0E4c11BBe10A694678647A2076f62c12e11,0x069741B2fFC5b1Af74ABbC8f8573bA70e3808409,0x3247CFcA66Df47a641C52f8F8244c02Ea0825208,0x4C7281e2Bd549a0aEa492b28Ef60E3D81Fed36E6,0x30aC05531AD3Defd35b623023f4A9bF12F299A55,0x9F0644875Df59661dA1F96546B04CE44EfA2926D,0xa35b617e794d4886413E676B44949e8AE1e896b3,0xF48c7B663DFCa76E1954bC44f7Fc006e2e04b09C,0x72DB39da38fa313A004770E8C4d9416428068024,0x917a07A0aF4E6A369562a16f9270a8D29E381963,0x5706a8179757414bFF24A41b02D61997053B8537,0xB09a3A1F6e0a796b015fed908a6acD571cE23d9D,0xe6433B8BBdc8407B695b802e88F1718024A296cE,0x3b9059CE69f6bb14B2a27FeFf02f6C3021D9ff95,0x31699404082d8908Eee25D17a6C5874DA89BfF23,0x5c1722eD2F8bb781e57F2a6F464CFf06DBD84578,0xc09a5f4697Ba63a34f81a6f97A375259E3565e41,0x6a38aa8403469B4349Ec5D5d6e6E18E64f276F50,0x083a8d7C1959b6250278cEaEE183166a79Ce9D7F,0x75a2f340Fd362ffab3d9e6Ba2995Eb28189406f2,0x95D368183934bDFCcB2d0068f37aFeD3d350770a,0x52B2A0774488140726229Be88fCaB9eF8f991afE,0x18A4F048a42674105F00700017C8098ed62dF4d9,0x6529cE1070Bf93E78584285Ca6bb269Ea34650a3,0xf1a04A2c0310977B9fc0a0941182b7eA308d2b81,0xCB5026995eb2e85683e51A3293d264Fa5F07Dd81,0xeE79a3bfBEb70c367Aba17D26528d231fcefE7ae,0x8184d7d86Cad5db73722F8F4483187c3F61B4b1B,0x3F7393618972a9D8C74075Eb426820948510F2Bd,0x3BB14861D62021c675a8631386dBBF07F6A15Fe5,0x9482fa358097193ed699927CA0B1991e90eE4E7E,0xb97E64AeE69137D3ADA7A2A14d9850645faE5387,0x4721BeE9248389393460344Ff03f218Aee44a05c,0x7366346810E6760D56C94b844E43e0E319C9AE42,0xc019415c47b861EA81F4240Ca8667d0a8ca382CF,0xD458144Ff2dde7Da45Bb8A7E67971A44dAdA0AB7,0x328cfD33cf2fC206857738A8bD602cDaAb10301E,0x50ACfC5d2f32CB2acebCA468A46E5331c6C696b8,0x8E997C4b4F89514ea146D937C9ec89449F270195,0x9eACdeeb7699E997AeECD3974884b4E3F3EDBf61,0x997d8977427E9A691b1535A148190f71FAAdC7e4,0xD1128b16691bAfafc5d626210a22c8B329BA710E,0x6bD4141af55314Cd3f4C81272033b0e025783Cc0,0xe5764B7479544029EBE238b0F9074e450Fa6deD1,0x9f6297e7341A1be2474d6Fe01779297276463b37,0xaCd4Fa35b83E832d400e401b1e87bF68FdeAd97E,0xb40C8F06f285c5131839bAd685dFbf0eaD3f57b0,0x9e21FA74B59f3c3C9250f237B1E039509e0711ab,0xD2c419057cd372a85b9BbA4a363303253De6fF57,0x4CE34A79ad190f2E1546B14A70C0fE84bB947792,0x3d184438246aB153FcD5BaC2B29680789de35035,0x5c60B16246018638aD230db8343e69Aa36793e68,0xF002d288087D9b0DEEb9185e131A1E77dBDF28F6,0x026617a003616C8F4a660DB526Ac068c7bd12490,0x79D39b54B664D8aF7Ef3A685D855dB71685D62aa,0x2F5d0D3a2E4f46083433849a4BF39ac668a2771E,0x43F3752578d9F38677f6138A23960b49C7991703,0xa48358D4c0ad126276AA7Ba19ccf1EcA881A8B79,0x55d633Df856809c035d1c8Fb17462d657Ad08a0C,0x024db5796C3CaAB34e9c0995A1DF17A91EECA6cC,0xBFA03FeeB4889F360f61464dab315C1a159289aF,0x282a610b988Ca1C9d1bE7df02288d63a73F4F124,0x56f16a40a00C016bd71bB3144C0Cd9932Fa9D847,0x547bC8f6c144d6D833C8A749C90a0Fc34CBc50eE,0xbd44C4198BAb1B0ddaee8899E9DaECD03292a434,0x105Fa0964F28978e9796B0E17F6f086070A2E2Aa,0xf20d27B75D08bE30f350D207D5BE391cbC20A9ef,0xE4A386D9f2Bab2afb010Cb7130798A634757b599,0x81F1563ec197c2504c275eD683Cf2b1483A26d5f,0x797ACcE57a3d283175351c37B4436D3ae87f0490,0x3A468dcfBD8b3636372E87C981568D8D3FC76741,0xe7f6194D899c8FA0960d685c07125FfAADba5D74,0xA085278322B6E576493fA12A01d0422d987b88e9,0x64FefC0F6881806ce38F191eb608C717080d932B,0xcfE8a7eEeFa2182a91a86dB3C08ff6229899A50B,0x83af1CfBF94f792eEB36741c5372F6660A9bE920,0x04699Ff48CC6531727A12344c30F3eD1062Ff3ad,0x98f55C7665B7d06293518E087DE88940417c9699,0x4Ac1432C02Fa477e814A305e69fd975c39c9517F,0x36591116468a74eB8941d46EaeC3f4355f102ee3,0xB93bF9fd0890709d86f319EB5354f520329Db2E1,0xb0c6fEc41336d934C7D0deAa749203A39A1DD73f,0xe6aD3D014324fe724d961840a3dec1326D9d40F2,0x483F081bB0C25A5B216D1A4BD9CE0196092A0575,0xfeD27588535EEa65B4254946a717052d5661D5b3".split(
      ","
    ) //await getDeployedBrackets(argv.masterSafe)
    console.log("The following addresses have been deployed from your MASTER SAFE: ", bracketAddresses.join())

    // writing the brackets into a csv file
    const csvWriter = createCsvWriter({
      path: argv.outputFile || "./bracket-addresses.csv",
      header: [
        { id: "Address", title: "Address" },
        { id: "Type", title: "Type" },
        { id: "Description", title: "Description" },
        { id: "Tags", title: "Tags" },
      ],
    })

    const exchange = await getExchange(web3)
    const records = await Promise.all(
      bracketAddresses.map(async (bracketAddress) => {
        const orders = decodeOrders(await exchange.getEncodedUserOrders.call(bracketAddress))
        let tradingPair
        let priceRange = [0, 0]
        let balance = [0, 0]
        let tokenInfoPromises
        let symbols = ["NAN", "NAN"]
        if (orders.length > 0) {
          tokenInfoPromises = fetchTokenInfoFromExchange(exchange, [orders[0].buyToken, orders[0].sellToken])
          tradingPair =
            (await tokenInfoPromises[orders[0].sellToken]).symbol + " - " + (await tokenInfoPromises[orders[0].buyToken]).symbol
          priceRange[0] =
            (orders[0].priceDenominator /
              orders[0].priceNumerator /
              10 ** (await tokenInfoPromises[orders[0].sellToken]).decimals) *
            10 ** (await tokenInfoPromises[orders[0].buyToken]).decimals
          priceRange[1] =
            (orders[1].priceNumerator * 10 ** (await tokenInfoPromises[orders[1].sellToken]).decimals) /
            orders[1].priceDenominator /
            10 ** (await tokenInfoPromises[orders[1].buyToken]).decimals
          balance[0] =
            (await exchange.getBalance.call(bracketAddress, (await tokenInfoPromises[orders[1].sellToken]).address)) /
            10 ** (await tokenInfoPromises[orders[1].sellToken]).decimals
          balance[1] =
            (await exchange.getBalance.call(bracketAddress, (await tokenInfoPromises[orders[1].buyToken]).address)) /
            10 ** (await tokenInfoPromises[orders[1].buyToken]).decimals
          symbols[0] = (await tokenInfoPromises[orders[1].sellToken]).symbol
          symbols[1] = (await tokenInfoPromises[orders[1].buyToken]).symbol
        } else {
          tradingPair = " - not yet defined -"
        }
        return {
          Address: bracketAddress,
          Type: "liquidity",
          Description:
            "bracket-strategy on the pair " +
            tradingPair +
            " controlled by master safe: " +
            argv.masterSafe +
            " and the price range " +
            priceRange[0] +
            " - " +
            priceRange[1] +
            " and funding " +
            balance[0] +
            " of " +
            symbols[0] +
            " and " +
            balance[1] +
            " " +
            symbols[1],
          Tags: "bracket-strategy",
        }
      })
    )
    await csvWriter.writeRecords(records)

    callback()
  } catch (error) {
    callback(error)
  }
}
